/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package space.crab8012.taskspreader;

import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;

/**
 *
 * @author jorda
 */
public class MainFrame extends javax.swing.JFrame {

    public static List<String> listData = new ArrayList<String>();
    public static List<Integer> listImportance = new ArrayList<Integer>();
    public static List<Double> listTime = new ArrayList<Double>();
    public static List<Double> listPercentage = new ArrayList<Double>();

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        taskListScroller = new javax.swing.JScrollPane();
        taskList = new javax.swing.JList<String>();
        btnEditTask = new javax.swing.JButton();
        btnDeleteTask = new javax.swing.JButton();
        TaskLabel = new javax.swing.JLabel();
        taskEntry = new javax.swing.JTextField();
        labelImportance = new javax.swing.JLabel();
        btnAddTask = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        labelTotalTime = new javax.swing.JLabel();
        btnCalculate = new javax.swing.JButton();
        importanceSlider = new javax.swing.JSlider();
        timeSpinner = new javax.swing.JSpinner();
        btnResetProject = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Task Spreader");

        taskList.setFixedCellHeight(15);
        taskList.setFocusCycleRoot(true);
        taskListScroller.setViewportView(taskList);

        btnEditTask.setText("Edit Task");
        btnEditTask.setEnabled(false);

        btnDeleteTask.setText("Delete Task");
        btnDeleteTask.setEnabled(false);
        btnDeleteTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteTaskActionPerformed(evt);
            }
        });

        TaskLabel.setText("Task:");

        taskEntry.setToolTipText("Type a brief description of the task");
        taskEntry.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                taskEntryKeyPressed(evt);
            }
        });

        labelImportance.setText("Importance");

        btnAddTask.setText("Add Task");
        btnAddTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTaskActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        labelTotalTime.setText("Total Time (Minutes)");

        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        importanceSlider.setMajorTickSpacing(1);
        importanceSlider.setMaximum(5);
        importanceSlider.setMinimum(1);
        importanceSlider.setMinorTickSpacing(1);
        importanceSlider.setPaintLabels(true);
        importanceSlider.setPaintTicks(true);
        importanceSlider.setSnapToTicks(true);
        importanceSlider.setToolTipText("The importance of the task from 0 to 5");
        importanceSlider.setValue(1);

        timeSpinner.setValue(1);

        btnResetProject.setBackground(new java.awt.Color(255, 0, 0));
        btnResetProject.setText("Close Project");
        btnResetProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetProjectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(taskListScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnEditTask, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteTask, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(TaskLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelImportance, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
                    .addComponent(labelTotalTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(taskEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddTask)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCalculate)
                            .addComponent(btnReset)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(timeSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(importanceSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(btnResetProject)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(taskListScroller, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(TaskLabel)
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(taskEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(importanceSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelImportance))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddTask)
                            .addComponent(btnReset))
                        .addGap(129, 129, 129)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelTotalTime)
                            .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditTask)
                    .addComponent(btnDeleteTask)
                    .addComponent(btnCalculate))
                .addGap(18, 18, 18)
                .addComponent(btnResetProject)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTaskActionPerformed
        if (!taskEntry.getText().equals("")) {
            //Get the values of the textbox and the slider for later use
            String tsk = taskEntry.getText();
            int weight = importanceSlider.getValue();

            //Add the task name and importance to the appropriate lists
            listData.add(tsk);
            listImportance.add(weight);

            //Add all of the data to the listbox
            taskList.setListData(listData.toArray(new String[listData.size()]));


            //Clear the textbox and the slider
            taskEntry.setText(null);
            importanceSlider.setValue(0);

            //Set the focus to the textbox so that we can start typing immediately
            taskEntry.requestFocus();
        }
        
    }//GEN-LAST:event_btnAddTaskActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        //Clear the textbox and the slider
        taskEntry.setText(null);
        importanceSlider.setValue(0);

        //Set the focus to the textbox so that we can start typing immediately
        taskEntry.requestFocus();

    }//GEN-LAST:event_btnResetActionPerformed

    private void btnDeleteTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteTaskActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteTaskActionPerformed

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        calculate((Integer) timeSpinner.getValue());
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void btnResetProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetProjectActionPerformed
        //Reset all form components
        taskEntry.setText(null);
        importanceSlider.setValue(0);
        taskList.setListData(new String[0]);
        timeSpinner.setValue(1);
        
        //Reset all lists
        listData.clear();
        listImportance.clear();
        listPercentage.clear();
        listTime.clear();
        
        super.dispose();
        StartPage.main();

        //Set the focus to the textbox so that we can start typing immediately
        //taskEntry.requestFocus();
    }//GEN-LAST:event_btnResetProjectActionPerformed

    private void taskEntryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_taskEntryKeyPressed
        
    }//GEN-LAST:event_taskEntryKeyPressed

    private void calculate(int time){
        System.out.println("CALCULATING FOR: " + time + " Minutes");
        
        //Get the total importance
        int totalImportance = 0;
        for(int x : listImportance){
            totalImportance += x;
        }
        for(int i = 0; i < listImportance.size(); i++){
            listPercentage.add(((double)listImportance.get(i)/totalImportance));
        }
        Double totalCalculatedTime = 0.0;
        for(int i = 0; i < listPercentage.size(); i++){
            double t;
            t = listPercentage.get(i) * time;
            totalCalculatedTime += t;
            listTime.add(t);
        }
        ResultsFrame.main(listData, listTime);
        
    }
    /**
     * @param args the command line arguments
     */
    public static void newProject() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    public static void openProject(){
        //ToDo: Parse data from a CSV to fill in the forms
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TaskLabel;
    private javax.swing.JButton btnAddTask;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnDeleteTask;
    private javax.swing.JButton btnEditTask;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnResetProject;
    private javax.swing.JSlider importanceSlider;
    private javax.swing.JLabel labelImportance;
    private javax.swing.JLabel labelTotalTime;
    private javax.swing.JTextField taskEntry;
    private javax.swing.JList<String> taskList;
    private javax.swing.JScrollPane taskListScroller;
    private javax.swing.JSpinner timeSpinner;
    // End of variables declaration//GEN-END:variables
}
